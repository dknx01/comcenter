<?php

namespace RssCleanerBundle\Repository;

use RssCleanerBundle\Entity\Expression;
use RssCleanerBundle\Entity\FreshRssEntry;

/**
 * FreshRssEntryRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class FreshRssEntryRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * @param array $data
     * @return FreshRssEntry[]
     */
    public function getEntriesByRegex(array $data = array())
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb->select('freshRssEntry')
            ->from('RssCleanerBundle:FreshRssEntry', 'freshRssEntry')
            ->where('REGEXP(freshRssEntry.title, :regex) = 1')
            ->orderBy('freshRssEntry.createdAt', 'DESC')
            ->setMaxResults($data['limit'])
            ->setParameter('regex', $data['expression']->getExpression());
        return $qb->getQuery()->getResult();
    }

    /**
     * @param Expression $expression
     * @return FreshRssEntry[]
     */
    public function getEntriesByExpression(Expression $expression)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb->select('freshRssEntry')
            ->from('RssCleanerBundle:FreshRssEntry', 'freshRssEntry')
            ->where('REGEXP(freshRssEntry.title, :regex) = 1')
            ->orderBy('freshRssEntry.createdAt', 'DESC')
            ->setMaxResults(20)
            ->setParameter('regex', $expression->getExpression());
        return $qb->getQuery()->getResult();
    }

    /**
     * @param string $expression
     * @return FreshRssEntry[]
     */
    public function getEntriesBySearchExpression($expression)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb->select('freshRssEntry')
            ->from('RssCleanerBundle:FreshRssEntry', 'freshRssEntry')
            ->where('REGEXP(freshRssEntry.title, :regex) = 1')
            ->orderBy('freshRssEntry.createdAt', 'DESC')
            ->setMaxResults(20)
            ->setParameter('regex', $expression);
        return $qb->getQuery()->getResult();
    }

    /**
     * @param string $regex
     * @return FreshRssEntry[]
     */
    public function getUnreadEntriesByRegex($regex)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb->select('freshRssEntry')
            ->from('RssCleanerBundle:FreshRssEntry', 'freshRssEntry')
            ->where('REGEXP(freshRssEntry.title, :regex) = 1')
            ->andWhere('freshRssEntry.read = false')
            ->setParameter('regex', $regex);
        return $qb->getQuery()->getResult();
    }

    /**
     * @param FreshRssEntry $entry
     */
    public function save(FreshRssEntry $entry)
    {
        $this->_em->persist($entry);
        $this->_em->persist($entry->getFeed());
        $this->_em->flush($entry);
        $this->_em->flush($entry->getFeed());
    }


}
